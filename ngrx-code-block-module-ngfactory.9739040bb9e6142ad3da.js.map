{"version":3,"sources":["webpack:///./src/app/custom-elements/ngrx/code-block.component.ts","webpack:///./src/app/custom-elements/ngrx/code-block.module.ts","webpack:///./src/app/custom-elements/ngrx/code-block.component.ngfactory.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/ngrx/code-block.component.ts.CodeBlockComponent.html","webpack:///./src/app/custom-elements/ngrx/code-block.module.ngfactory.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/code/pretty-printer.service.ts"],"names":["CodeBlockComponent","pretty","this","code","formattedCode","prototype","ngAfterContentInit","_this","formatCode","subscribe","codeContainer","nativeElement","innerHTML","code_block_module_CodeBlockModule","customElementComponent","RenderType_CodeBlockComponent","core","encapsulation","styles","data","View_CodeBlockComponent_0","_l","CodeBlockComponentNgFactory","pretty_printer_service","__webpack_require__","d","__webpack_exports__","CodeBlockModuleNgFactory","common","logger_service","PrettyPrinter","logger","prettyPrintOne","Object","rxjs__WEBPACK_IMPORTED_MODULE_0__","getPrettyPrintOne","pipe","rxjs_operators__WEBPACK_IMPORTED_MODULE_1__","ppo","window","Promise","resolve","e","then","module","__esModule","assign","default","err","msg","message","error","Error","language","linenums","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","substr","console","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__"],"mappings":"oHAwBAA,EAAA,WAcE,SAAAA,EAAoBC,GAAAC,KAAAD,SAPXC,KAAAC,KAAO,GAKhBD,KAAAE,cAAgB,GAWlB,OAPEJ,EAAAK,UAAAC,mBAAA,eAAAC,EAAAL,KAGEA,KAAKD,OAAOO,WAFa,YAAdN,KAAKC,KAhCI,2MASG,0HAyBMM,UAAU,SAAAL,GACrCG,EAAKG,cAAcC,cAAcC,UAAYR,KAGnDJ,EAvBA,GClBAa,EAAA,WASA,OATA,WAQEX,KAAAY,uBAAoCd,GARtC,eCIIe,EAAgCC,EAAA,IAAUC,cAAe,EAAGC,UAAmCC,UAE7F,SAAAC,EAAoCC,GAAM,OAAOL,EAAA,GAAQ,GAAIA,EAAA,GAAQ,UAAW,GAAKN,cAAe,KCXtGW,MAAAL,EAAA,sGAAwC,WDa5C,IAAIM,EAA8BN,EAAA,GAAQ,kBAAmBhB,EADvD,SAAyCqB,GAAM,OAAOL,EAAA,GAAQ,IAAKK,MAAQL,EAAA,GAAQ,EAAG,EAAG,KAAM,KAAM,EAAG,qBAAuB,KAAM,KAAM,KAAMI,EAA2BL,IAAiCC,EAAA,GAAQ,EAAG,QAAS,KAAM,EAAGhB,GAAwBuB,EAAA,GAAmB,KAAM,OAAQ,KAAM,QACzLpB,KAAM,uCEd5HqB,EAAAC,EAAAC,EAAA,6CAAAC,IAYA,IAAIA,EAA2BX,EAAA,GAAQH,KAAwB,SAAUQ,GAAM,OAAOL,EAAA,IAASA,EAAA,GAAQ,IAAKA,EAAA,EAA6BA,EAAA,KAAuC,GAAIM,KAAmC,EAAGN,EAAA,GAA8BA,EAAA,IAAkBA,EAAA,GAAQ,KAAMY,EAAA,EAAmBA,EAAA,GAA0BZ,EAAA,GAAe,EAAGY,EAAA,KAAyCZ,EAAA,GAAQ,KAAMO,EAAA,EAAkBA,EAAA,GAAmBM,EAAA,IAAab,EAAA,GAAQ,WAAYY,EAAA,EAAiBA,EAAA,MAAsBZ,EAAA,GAAQ,WAAYH,EAAoBA,iICIniBiB,EAAA,WAKE,SAAAA,EAAoBC,GAAA7B,KAAA6B,SAClB7B,KAAK8B,eAAiBC,OAAAC,EAAA,EAAAD,CAAY/B,KAAKiC,qBAAqBC,KAAKH,OAAAI,EAAA,EAAAJ,IA0CrE,OAvCUH,EAAAzB,UAAA8B,kBAAR,eAAA5B,EAAAL,KACQoC,EAAOC,OAA+B,eAC5C,OAAOD,EAAME,QAAQC,QAAQH,GAE3Bd,EAAAkB,EAAA,IAAAC,KAAA,eAAAC,EAAApB,EAAA,+BAAAoB,QAAAC,WAAAD,EAAAX,OAAAa,UAAA,iBAAAF,MAAAG,QAAAH,MACGD,KACC,WAAM,OAACJ,OAA+B,gBACtC,SAAAS,GACE,IAAMC,EAAM,uCAAuCD,EAAIE,QAGvD,OAFA3C,EAAKwB,OAAOoB,MAAM,IAAIC,MAAMH,IAErB,WAAQ,MAAM,IAAIG,MAAMH,OAczCnB,EAAAzB,UAAAG,WAAA,SAAWL,EAAckD,EAAmBC,GAC1C,OAAOpD,KAAK8B,eAAeI,KACzBH,OAAAsB,EAAA,EAAAtB,CAAI,SAAAK,GACF,IACE,OAAOA,EAAInC,EAAMkD,EAAUC,GAC3B,MAAON,GACP,IAAMC,EAAM,sCAAsC9C,EAAKqD,OAAO,EAAG,IAAG,QAEpE,MADAC,QAAQN,MAAMF,EAAKD,GACb,IAAII,MAAMH,MAGpBhB,OAAAyB,EAAA,EAAAzB,KAGNH,EAhDA","file":"ngrx-code-block-module-ngfactory.9739040bb9e6142ad3da.js","sourcesContent":["import {\n  Component,\n  Input,\n  AfterContentInit,\n  ViewChild,\n  ElementRef,\n} from '@angular/core';\nimport { PrettyPrinter } from '../code/pretty-printer.service';\n\nconst EFFECTS_EXAMPLE = `\n@Effect() search$ = this.actions$.pipe(\n  ofType<SearchAction>(BookActions.Types.Search),\n  map(action => action.query),\n  exhaustMap(query =>\n    this.googleBooksService.search(query)\n  ),\n);`;\n\nconst SCHEMATICS_EXAMPLE = `\n$ ng g store State --root --module app.module.ts\n create src/app/reducers/index.ts\n update src/app/app.module.ts\n`;\n\n@Component({\n  selector: 'ngrx-code-block',\n  template: `\n    <pre class=\"prettyprint\" #codeContainer></pre>\n  `,\n})\nexport class CodeBlockComponent implements AfterContentInit {\n  @Input() code = '';\n\n  @ViewChild('codeContainer', { read: ElementRef })\n  codeContainer;\n\n  formattedCode = '';\n\n  constructor(private pretty: PrettyPrinter) {}\n\n  ngAfterContentInit() {\n    let code = this.code === 'effects' ? EFFECTS_EXAMPLE : SCHEMATICS_EXAMPLE;\n\n    this.pretty.formatCode(code).subscribe(formattedCode => {\n      this.codeContainer.nativeElement.innerHTML = formattedCode;\n    });\n  }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeBlockComponent } from './code-block.component';\nimport { WithCustomElementComponent } from '../element-registry';\nimport { PrettyPrinter } from '../code/pretty-printer.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [CodeBlockComponent],\n  exports: [CodeBlockComponent],\n  entryComponents: [CodeBlockComponent],\n  providers: [PrettyPrinter],\n})\nexport class CodeBlockModule implements WithCustomElementComponent {\n  customElementComponent: Type<any> = CodeBlockComponent;\n}\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./code-block.component\";\nimport * as i2 from \"../code/pretty-printer.service\";\nvar styles_CodeBlockComponent = [];\nvar RenderType_CodeBlockComponent = i0.ɵcrt({ encapsulation: 2, styles: styles_CodeBlockComponent, data: {} });\nexport { RenderType_CodeBlockComponent as RenderType_CodeBlockComponent };\nexport function View_CodeBlockComponent_0(_l) { return i0.ɵvid(0, [i0.ɵqud(402653184, 1, { codeContainer: 0 }), (_l()(), i0.ɵeld(1, 0, [[1, 0], [\"codeContainer\", 1]], null, 0, \"pre\", [[\"class\", \"prettyprint\"]], null, null, null, null, null))], null, null); }\nexport function View_CodeBlockComponent_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"ngrx-code-block\", [], null, null, null, View_CodeBlockComponent_0, RenderType_CodeBlockComponent)), i0.ɵdid(1, 1097728, null, 0, i1.CodeBlockComponent, [i2.PrettyPrinter], null, null)], null, null); }\nvar CodeBlockComponentNgFactory = i0.ɵccf(\"ngrx-code-block\", i1.CodeBlockComponent, View_CodeBlockComponent_Host_0, { code: \"code\" }, {}, []);\nexport { CodeBlockComponentNgFactory as CodeBlockComponentNgFactory };\n","\n    <pre class=\"prettyprint\" #codeContainer></pre>\n  ","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./code-block.module\";\nimport * as i2 from \"./code-block.component.ngfactory\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../code/pretty-printer.service\";\nimport * as i5 from \"../../shared/logger.service\";\nvar CodeBlockModuleNgFactory = i0.ɵcmf(i1.CodeBlockModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [i2.CodeBlockComponentNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i3.NgLocalization, i3.NgLocaleLocalization, [i0.LOCALE_ID, [2, i3.ɵangular_packages_common_common_a]]), i0.ɵmpd(4608, i4.PrettyPrinter, i4.PrettyPrinter, [i5.Logger]), i0.ɵmpd(1073742336, i3.CommonModule, i3.CommonModule, []), i0.ɵmpd(1073742336, i1.CodeBlockModule, i1.CodeBlockModule, [])]); });\nexport { CodeBlockModuleNgFactory as CodeBlockModuleNgFactory };\n","import { Injectable } from '@angular/core';\n\nimport { from as fromPromise, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ndeclare const System: {\n  import(name: string): Promise<any>;\n};\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n  private prettyPrintOne: Observable<PrettyPrintOne>;\n\n  constructor(private logger: Logger) {\n    this.prettyPrintOne = fromPromise(this.getPrettyPrintOne()).pipe(share());\n  }\n\n  private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n    const ppo = (window as any)['prettyPrintOne'];\n    return ppo ? Promise.resolve(ppo) :\n      // prettify.js is not in window global; load it with webpack loader\n      System.import('assets/js/prettify.js')\n        .then(\n          () => (window as any)['prettyPrintOne'],\n          err => {\n            const msg = `Cannot get prettify.js from server: ${err.message}`;\n            this.logger.error(new Error(msg));\n            // return a pretty print fn that always fails.\n            return () => { throw new Error(msg); };\n          });\n  }\n\n  /**\n   * Format code snippet as HTML\n   * @param {string} code - the code snippet to format; should already be HTML encoded\n   * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param {string|number} [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n  formatCode(code: string, language?: string, linenums?: number | boolean) {\n    return this.prettyPrintOne.pipe(\n      map(ppo => {\n        try {\n          return ppo(code, language, linenums);\n        } catch (err) {\n          const msg = `Could not format code that begins '${code.substr(0, 50)}...'.`;\n          console.error(msg, err);\n          throw new Error(msg);\n        }\n      }),\n      first(),  // complete immediately\n    );\n  }\n}\n"],"sourceRoot":""}