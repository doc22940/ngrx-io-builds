{
  "id": "guide/store",
  "title": "Store overview",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/store/index.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"store-overview\">Store overview<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store#store-overview\"><i class=\"material-icons\">link</i></a></h1>\n<p>Store is RxJS powered state management for Angular applications, inspired by Redux. Store is a controlled state container designed to help write performant, consistent applications on top of Angular.</p>\n<h2 id=\"key-concepts\">Key concepts<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store#key-concepts\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li><a href=\"guide/store/actions\">Actions</a> describe unique events that are dispatched from components and services.</li>\n<li>State changes are handled by pure functions called <a href=\"guide/store/reducers\">reducers</a> that take the current state and the latest action to compute a new state.</li>\n<li><a href=\"guide/store/selectors\">Selectors</a> are pure functions used to select, derive and compose pieces of state.</li>\n<li>State accessed with the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code>, an observable of state and an observer of actions.</li>\n</ul>\n<h2 id=\"tutorial\">Tutorial<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store#tutorial\"><i class=\"material-icons\">link</i></a></h2>\n<p>The following tutorial shows you how to manage the state of a counter, and how to select and display it within an Angular component.</p>\n<ol>\n<li>\n<p>Generate a <a href=\"https://stackblitz.com/fork/ngrx-start\" target=\"_blank\">new project</a> using StackBlitz.</p>\n</li>\n<li>\n<p>Right click on the <code>app</code> folder in StackBlitz and create a new file named <code>counter.actions.ts</code> to describe the counter actions to increment, decrement, and reset its value.</p>\n</li>\n</ol>\n<code-example language=\"ts\">\n// counter.actions.ts\nimport { <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> } from '@ngrx/store';\n\nexport enum ActionTypes {\n  Increment = '[Counter Component] Increment',\n  Decrement = '[Counter Component] Decrement',\n  Reset = '[Counter Component] Reset',\n}\n\nexport class Increment implements <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> {\n  readonly <a href=\"api/store/Action#type\" class=\"code-anchor\">type</a> = ActionTypes.Increment;\n}\n\nexport class Decrement implements <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> {\n  readonly <a href=\"api/store/Action#type\" class=\"code-anchor\">type</a> = ActionTypes.Decrement;\n}\n\nexport class Reset implements <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> {\n  readonly <a href=\"api/store/Action#type\" class=\"code-anchor\">type</a> = ActionTypes.Reset;\n}\n</code-example>\n<ol start=\"3\">\n<li>Define a reducer function to handle changes in the counter value based on the provided actions.</li>\n</ol>\n<code-example language=\"ts\">\n// counter.reducer.ts\nimport { <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> } from '@ngrx/store';\nimport { ActionTypes } from './counter.actions';\n\nexport const <a href=\"api/store/testing/MockStoreConfig#initialState\" class=\"code-anchor\">initialState</a> = 0;\n\nexport function counterReducer(<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> = <a href=\"api/store/testing/MockStoreConfig#initialState\" class=\"code-anchor\">initialState</a>, action: <a href=\"api/store/Action\" class=\"code-anchor\">Action</a>) {\n  switch (action.type) {\n    case ActionTypes.Increment:\n      return <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> + 1;\n\n    case ActionTypes.Decrement:\n      return <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> - 1;\n\n    case ActionTypes.Reset:\n      return 0;\n\n    default:\n      return <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>;\n  }\n}\n</code-example>\n<ol start=\"4\">\n<li>Import the <code><a href=\"api/store/StoreModule\" class=\"code-anchor\">StoreModule</a></code> from <code>@ngrx/store</code> and the <code>counter.reducer</code> file.</li>\n</ol>\n<code-example language=\"ts\">\n// app.module.ts\nimport { <a href=\"api/store/StoreModule\" class=\"code-anchor\">StoreModule</a> } from '@ngrx/store';\nimport { counterReducer } from './counter.reducer';\n</code-example>\n<ol start=\"5\">\n<li>Add the <code>StoreModule.forRoot</code> function in the <code>imports</code> array of your <code>AppModule</code> with an object containing the <code>count</code> and the <code>counterReducer</code> that manages the state of the counter. The <code><a href=\"\" class=\"code-anchor\">StoreModule.forRoot()</a></code> method registers the global providers needed to access the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> throughout your application.</li>\n</ol>\n<code-example language=\"ts\">\n// app.module.ts\n@NgModule({\n  imports: [\n    // other imports\n    StoreModule.forRoot({ count: counterReducer }),\n  ],\n})\nexport class AppModule {}\n</code-example>\n<ol start=\"6\">\n<li>Create a new <em>Component</em> named <code>my-counter</code> in the <code>app</code> folder. Inject the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> service into your component to dispatch the counter actions, and use the <code><a href=\"api/store/select\" class=\"code-anchor\">select</a></code> operator to <em>select</em> data from the state.</li>\n</ol>\n<code-example language=\"ts\">\n// my-counter.component.ts\nimport { Component } from '@angular/core';\nimport { <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>, <a href=\"api/store/select\" class=\"code-anchor\">select</a> } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { Increment, Decrement, Reset } from '../counter.actions';\n\n@Component({\n  selector: 'app-my-counter',\n  template: `\n    &#x3C;button (click)=\"increment()\">Increment&#x3C;/button>\n\n    &#x3C;div>Current Count: {{ count$ | async }}&#x3C;/div>\n\n    &#x3C;button (click)=\"decrement()\">Decrement&#x3C;/button>\n\n    &#x3C;button (click)=\"reset()\">Reset Counter&#x3C;/button>\n  `,\n})\nexport class MyCounterComponent {\n  count$: Observable&#x3C;number>;\n\n  constructor(private store: <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>&#x3C;{ count: number }>) {\n    this.count$ = store.pipe(<a href=\"api/store/select\" class=\"code-anchor\">select</a>('count'));\n  }\n\n  increment() {\n    this.store.dispatch(new Increment());\n  }\n\n  decrement() {\n    this.store.dispatch(new Decrement());\n  }\n\n  reset() {\n    this.store.dispatch(new Reset());\n  }\n}\n</code-example>\n<ol start=\"7\">\n<li>Add the <code>MyCounter</code> component to your <code>AppComponent</code> template.</li>\n</ol>\n<code-example language=\"html\">\n&#x3C;app-my-counter>&#x3C;/app-my-counter>\n</code-example>\n<p>And that's it! Click the increment, decrement, and reset buttons to change the state of the counter.</p>\n<p>Let's cover what you did:</p>\n<ul>\n<li>Defined actions to express events.</li>\n<li>Defined a reducer function to manage the state of the counter.</li>\n<li>Registered the global state container that is available throughout your application.</li>\n<li>Injected the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> service to dispatch actions and select the current state of the counter.</li>\n</ul>\n<h2 id=\"next-steps\">Next Steps<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<p>Learn about the architecture of an NgRx application through <a href=\"guide/store/actions\">actions</a>, <a href=\"guide/store/reducers\">reducers</a>, and <a href=\"guide/store/selectors\">selectors</a>.</p>\n\n</div>\n\n<!-- links to this doc:\n - docs\n - guide/effects\n - guide/router-store\n - guide/store-devtools\n - index\n-->\n<!-- links from this doc:\n - api/store-devtools/StoreDevtools#state\n - api/store/Action\n - api/store/Action#type\n - api/store/Store\n - api/store/StoreModule\n - api/store/select\n - api/store/testing/MockStoreConfig#initialState\n - guide/store#key-concepts\n - guide/store#next-steps\n - guide/store#store-overview\n - guide/store#tutorial\n - guide/store/actions\n - guide/store/reducers\n - guide/store/selectors\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/store/index.md?message=docs%3A%20describe%20your%20change...\n - https://stackblitz.com/fork/ngrx-start\n-->"
}